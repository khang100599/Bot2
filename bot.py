import json
import datetime
import os
import asyncio
import time
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.error import Conflict
import threading
import http.server
import socketserver
import firebase_admin
from firebase_admin import credentials, db

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TOKEN = os.getenv("BOT_TOKEN")

# Ki·ªÉm tra token
if not TOKEN:
    raise ValueError("BOT_TOKEN ph·∫£i ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng")

# L·∫•y n·ªôi dung Firebase credentials t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
FIREBASE_CREDENTIALS = os.getenv("FIREBASE_CREDENTIALS")
if not FIREBASE_CREDENTIALS:
    raise ValueError("FIREBASE_CREDENTIALS ph·∫£i ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng")

# Chuy·ªÉn ƒë·ªïi n·ªôi dung JSON th√†nh dictionary
firebase_credentials = json.loads(FIREBASE_CREDENTIALS)

# C·∫•u h√¨nh Firebase
cred = credentials.Certificate(firebase_credentials)
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://bot2-eb694-default-rtdb.asia-southeast1.firebasedatabase.app/'
})

# Tham chi·∫øu ƒë·∫øn d·ªØ li·ªáu trong Firebase
ref = db.reference('groups')

# ƒê·ªçc d·ªØ li·ªáu t·ª´ Firebase
def load_data():
    try:
        data = ref.get()
        if data is None:
            return {"groups": {}}
        return {"groups": data}
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ Firebase: {e}")
        return {"groups": {}}

# L∆∞u d·ªØ li·ªáu v√†o Firebase
def save_data(data):
    try:
        ref.set(data["groups"])
    except Exception as e:
        print(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o Firebase: {e}")

# H√†m ki·ªÉm tra quy·ªÅn truy c·∫≠p
def is_subscribed(chat_id, data):
    try:
        group = data["groups"].get(str(chat_id))
        if not group:
            return False
        end_date = datetime.datetime.strptime(group["subscription_end"], "%Y-%m-%d")
        return end_date >= datetime.datetime.now()
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra quy·ªÅn truy c·∫≠p: {e}")
        return False

# H√†m x·ª≠ l√Ω l·ªánh /start
async def start(update: Update, context):
    chat_id = update.message.chat.id
    data = load_data()
    if not is_subscribed(chat_id, data):
        await update.message.reply_text("Group n√†y ch∆∞a ƒëƒÉng k√Ω s·ª≠ d·ª•ng bot. Li√™n h·ªá admin ƒë·ªÉ thu√™!")
        return
    await update.message.reply_text("Xin ch√†o! M√¨nh l√† bot h·ªó tr·ª£ ƒë√¢y! D√πng c√°c l·ªánh nh∆∞ /guilinkgroup, /addspam, /resetwarnings ƒë·ªÉ qu·∫£n l√Ω group nh√©!")

# H√†m x·ª≠ l√Ω l·ªánh /guilinkgroup (tr·∫£ v·ªÅ ID group)
async def guilinkgroup(update: Update, context):
    chat_id = update.message.chat.id
    data = load_data()
    if not is_subscribed(chat_id, data):
        await update.message.reply_text("Group n√†y ch∆∞a ƒëƒÉng k√Ω!")
        return
    # ƒê·∫£m b·∫£o group c√≥ c·∫•u tr√∫c d·ªØ li·ªáu
    if str(chat_id) not in data["groups"]:
        data["groups"][str(chat_id)] = {"spam_keywords": [], "violations": {}, "ban_limit": 3, "subscription_end": "2025-12-31"}
        save_data(data)
    
    # Tr·∫£ v·ªÅ ID group
    await update.message.reply_text(f"ID group: {chat_id}")

# H√†m th√™m t·ª´ kh√≥a spam
async def add_spam_keyword(update: Update, context):
    chat_id = update.message.chat.id
    data = load_data()
    if not is_subscribed(chat_id, data):
        await update.message.reply_text("Group n√†y ch∆∞a ƒëƒÉng k√Ω!")
        return
    # Ki·ªÉm tra quy·ªÅn admin
    try:
        admins = [admin.user.id for admin in await context.bot.get_chat_administrators(chat_id)]
        if update.message.from_user.id not in admins:
            await update.message.reply_text("Ch·ªâ admin group ƒë∆∞·ª£c d√πng l·ªánh n√†y!")
            return
    except Exception as e:
        await update.message.reply_text("L·ªói khi ki·ªÉm tra quy·ªÅn admin. Th·ª≠ l·∫°i sau!")
        print(f"L·ªói ki·ªÉm tra admin: {e}")
        return
    if not context.args:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p t·ª´ kh√≥a! V√≠ d·ª•: /addspam qu·∫£ng_c√°o")
        return
    keyword = context.args[0].lower()
    # ƒê·∫£m b·∫£o group c√≥ c·∫•u tr√∫c d·ªØ li·ªáu
    if str(chat_id) not in data["groups"]:
        data["groups"][str(chat_id)] = {"spam_keywords": [], "violations": {}, "ban_limit": 3, "subscription_end": "2025-12-31"}
    data["groups"][str(chat_id)]["spam_keywords"].append(keyword)
    save_data(data)
    await update.message.reply_text(f"ƒê√£ th√™m t·ª´ kh√≥a '{keyword}' v√†o danh s√°ch c·∫•m.")

# H√†m reset s·ªë l·∫ßn c·∫£nh b√°o
async def reset_warnings(update: Update, context):
    chat_id = update.message.chat.id
    data = load_data()
    if not is_subscribed(chat_id, data):
        await update.message.reply_text("Group n√†y ch∆∞a ƒëƒÉng k√Ω!")
        return
    # Ki·ªÉm tra quy·ªÅn admin
    try:
        admins = [admin.user.id for admin in await context.bot.get_chat_administrators(chat_id)]
        if update.message.from_user.id not in admins:
            await update.message.reply_text("Ch·ªâ admin group ƒë∆∞·ª£c d√πng l·ªánh n√†y!")
            return
    except Exception as e:
        await update.message.reply_text("L·ªói khi ki·ªÉm tra quy·ªÅn admin. Th·ª≠ l·∫°i sau!")
        print(f"L·ªói ki·ªÉm tra admin: {e}")
        return

    # ƒê·∫£m b·∫£o group c√≥ c·∫•u tr√∫c d·ªØ li·ªáu
    if str(chat_id) not in data["groups"]:
        data["groups"][str(chat_id)] = {"spam_keywords": [], "violations": {}, "ban_limit": 3, "subscription_end": "2025-12-31"}

    # N·∫øu kh√¥ng c√≥ tham s·ªë, reset cho ng∆∞·ªùi g·ª≠i l·ªánh
    if not context.args:
        user_id = update.message.from_user.id
        username = update.message.from_user.username
        data["groups"][str(chat_id)]["violations"][str(user_id)] = 0
        save_data(data)
        await update.message.reply_text(f"ƒê√£ reset s·ªë l·∫ßn c·∫£nh b√°o c·ªßa b·∫°n (@{username}) v·ªÅ 0. B·∫°n an to√†n r·ªìi! üòä")
        return

    # N·∫øu c√≥ tham s·ªë, reset cho ng∆∞·ªùi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    target_username = context.args[0].lstrip('@')  # B·ªè k√Ω t·ª± @ n·∫øu c√≥
    try:
        # L·∫•y danh s√°ch th√†nh vi√™n trong group ƒë·ªÉ t√¨m user_id
        chat_members = await context.bot.get_chat_administrators(chat_id)
        chat_members.extend((await context.bot.get_chat_members(chat_id)).users)
        target_user = None
        for member in chat_members:
            if member.username and member.username.lower() == target_username.lower():
                target_user = member
                break

        if not target_user:
            await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng @{target_username} trong group!")
            return

        target_user_id = target_user.id
        data["groups"][str(chat_id)]["violations"][str(target_user_id)] = 0
        save_data(data)
        await update.message.reply_text(f"ƒê√£ reset s·ªë l·∫ßn c·∫£nh b√°o c·ªßa @{target_username} v·ªÅ 0. H·ªç an to√†n r·ªìi! üòä")
    except Exception as e:
        await update.message.reply_text("L·ªói khi t√¨m ng∆∞·ªùi d√πng. H√£y th·ª≠ l·∫°i!")
        print(f"L·ªói khi reset warnings: {e}")

# H√†m x·ª≠ l√Ω tin nh·∫Øn ƒë·ªÉ ki·ªÉm tra spam
async def handle_message(update: Update, context):
    message = update.message
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.lower()

    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    data = load_data()
    if not is_subscribed(chat_id, data):
        return  # Kh√¥ng ph·∫£n h·ªìi n·∫øu group ch∆∞a ƒëƒÉng k√Ω

    # ƒê·∫£m b·∫£o group c√≥ c·∫•u tr√∫c d·ªØ li·ªáu
    if str(chat_id) not in data["groups"]:
        data["groups"][str(chat_id)] = {"spam_keywords": [], "violations": {}, "ban_limit": 3, "subscription_end": "2025-12-31"}
        save_data(data)

    # Ki·ªÉm tra spam
    try:
        group_data = data["groups"][str(chat_id)]
        for keyword in group_data["spam_keywords"]:
            if keyword in text:
                await message.delete()
                group_data["violations"][str(user_id)] = group_data["violations"].get(str(user_id), 0) + 1
                warning = f"@{message.from_user.username} g·ª≠i tin nh·∫Øn ch·ª©a t·ª´ kh√≥a c·∫•m ('{keyword}'). Vi ph·∫°m l·∫ßn {group_data['violations'][str(user_id)]}."
                await context.bot.send_message(chat_id=chat_id, text=warning)
                if group_data["violations"][str(user_id)] >= group_data["ban_limit"]:
                    await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
                    await context.bot.send_message(chat_id=chat_id, text=f"@{message.from_user.username} ƒë√£ b·ªã c·∫•m v√¨ vi ph·∫°m {group_data['ban_limit']} l·∫ßn.")
                    group_data["violations"][str(user_id)] = 0
                save_data(data)
                return
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra spam: {e}")
        await message.reply_text("L·ªói khi ki·ªÉm tra spam. Th·ª≠ l·∫°i sau!")

# H√†m ch·∫°y server HTTP gi·∫£ ƒë·ªÉ Render nh·∫≠n c·ªïng
def run_dummy_server():
    PORT = 8080  # Render th∆∞·ªùng ki·ªÉm tra c·ªïng 8080
    Handler = http.server.SimpleHTTPRequestHandler
    try:
        with socketserver.TCPServer(("", PORT), Handler) as httpd:
            print(f"Dummy server running on port {PORT} for Render health check...")
            httpd.serve_forever()
    except Exception as e:
        print(f"L·ªói khi ch·∫°y dummy server: {e}")
        raise

# H√†m ch·∫°y bot v·ªõi v√≤ng l·∫∑p retry
async def run_bot_with_retry():
    while True:
        # T·∫°o v√≤ng l·∫∑p s·ª± ki·ªán m·ªõi
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # T·∫°o ·ª©ng d·ª•ng bot
        application = Application.builder().token(TOKEN).build()

        # Th√™m l·ªánh
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("guilinkgroup", guilinkgroup))
        application.add_handler(CommandHandler("addspam", add_spam_keyword))
        application.add_handler(CommandHandler("resetwarnings", reset_warnings))

        # Th√™m x·ª≠ l√Ω tin nh·∫Øn ƒë·ªÉ ki·ªÉm tra spam
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        try:
            # Kh·ªüi t·∫°o bot
            await application.initialize()
            print("Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")

            # Ch·∫°y bot
            print("ƒêang kh·ªüi ƒë·ªông bot...")
            await application.start()
            await application.updater.start_polling(drop_pending_updates=True)
            print("Bot ƒëang ch·∫°y...")

            # Ch·ªù v√¥ th·ªùi h·∫°n cho ƒë·∫øn khi bot d·ª´ng
            await asyncio.Event().wait()

        except Conflict as e:
            print(f"L·ªói Conflict: {e}. Vui l√≤ng ki·ªÉm tra xem bot c√≥ ƒëang ch·∫°y ·ªü n∆°i kh√°c kh√¥ng!")
            break
        except Exception as e:
            print(f"L·ªói kh√¥ng mong mu·ªën: {e}. Th·ª≠ l·∫°i sau 10 gi√¢y...")
        finally:
            # D·ªçn d·∫πp t√†i nguy√™n
            try:
                await application.updater.stop()
                await application.stop()
                await application.shutdown()
                print("Bot ƒë√£ d·ª´ng v√† d·ªçn d·∫πp t√†i nguy√™n th√†nh c√¥ng.")
            except Exception as e:
                print(f"L·ªói khi d·ª´ng bot: {e}")
            finally:
                # ƒê√≥ng v√≤ng l·∫∑p s·ª± ki·ªán
                loop.close()

        # N·∫øu c√≥ l·ªói, ch·ªù 10 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
        print("ƒêang ch·ªù 10 gi√¢y tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i...")
        time.sleep(10)

# H√†m ch√≠nh
def main():
    # Ch·∫°y server HTTP gi·∫£ trong m·ªôt thread ri√™ng
    server_thread = threading.Thread(target=run_dummy_server, daemon=True)
    server_thread.start()

    # Ch·∫°y bot v·ªõi v√≤ng l·∫∑p retry
    asyncio.run(run_bot_with_retry())

if __name__ == "__main__":
    main()
